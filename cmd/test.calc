func main() int {
    testAllocWrap()
    AAA()
    t := heapalloc<Test>()
    t.A = 888
    printIntln(t.A)
    heapfree<Test>(t)
    testBasicGeneric()
    var a4 byte
    a4 = 1
    testInterface(&a4)
    printIntln(a4)
    a2 :=  &Test{
        A:100,
    }
    a2.add()
    printIntln(a2.A)
    var a1 int
    a1 = 1
    printIntln(a1)
    var b1 *int
    b1 = &a1
    c1 := &b1
    printIntln(3 * *b1)
    printIntln(**c1)
    Add1(c1)
    printIntln(**c1)
    var a [2][3]Test
    a = [2][3]Test{}
    a[1][2]= Test{
        A:100,
        B: Test1{
            A:200,
            B:true,
        },
    }
    a[1][2].B.A = 300
    printBoolln(a[1][2].B.B)
    printIntln(a[1][2].B.A)
    add(2,1)
    d := false
    printBoolln(d)
    d = true||d
    printBoolln(d)
    var _a1 float
    _a1 = 3.0 + 2.2*(3.1+9.6)/8.3
    var b = 5+9*6
    var c int
    c = b
    c = add(c,b)
    printIntln(c)
    printIntln(b)
    printFloatln(_a1)
    printIntln(add(7*8,add(c,b)))
    d = !(c!=(b+c-b))&&b>c
    printBoolln(d)
    printBoolln(!(c!=(b+c-b))||b>c)
    add(1,2)
    return 0
}
func testAllocWrap() int {
    a := heapalloc<test>()
    a.a = 100
    b := heapalloc<test1>()
    a.b=b
    a.b.a =1
    printIntln(a.b.a)
    return 0
}
type test struct{
    a int
    b *test1
}
type test1 struct{
    a int32
}
func testBasicGeneric() int {
    genericTest<int>(100)
    return 0
}
func AAA() void {
    printIntln(997)
    return
}
func heapfree<T>(t *T) void {
    free(unsafecast<*T,*byte>(t))
    return
}

func genericTest<T>(v T) int {
    return 0
}

func heapalloc<T>() *T {
    size := sizeof<T>()
    bs := GC_malloc(size)
    seted := memset(bs,0,size)
    return unsafecast<*byte,*T>(seted)
}


func testInterface(x any) int {
    var a any
    b := 1
    a = &b
    var c adder
    c = &b
    a = c
    printIntln(c.add())
    a.add()
    return 0
}
func add(this x any) int {
    return 0
}
func add(this a *int) int {
    return *a
}
type any interface {

}
type adder interface {
    add() int
}


func Add1(v **int) int {
    **v = **v + 1
    return 0
}

type Test struct {
    A int
    B Test1
}
type Test1 struct {
    A int
    B bool
}

func add(this a Test) int {
    printIntln(a.A)
    a.A = 999999
    return 0
}


func add(a int, b int) int {
	for i := 0; i < 10; i = i + 1 {
        printIntln(i)
	}
    for i := 0; true; i = i + 1 {
        if i > 3 {
            break
        }
        if i == 1 {
            continue
        }
        printIntln(i)
	}
    if a>b {
        var a int
        a = 100
        add(0,1)
        printIntln(a)
    }else if a<b {
        printIntln(2)
        return b
    }else {
        printIntln(3)
        return 0
    }
    printIntln(a)
    return a+b
}

// some comment
package main

import (
    "github.com/Chronostasys/calc/test/test2"
    "github.com/Chronostasys/calc/test/generic"
    "github.com/Chronostasys/calc/test/generic/sub"
)

func main() int {
    testAllocWrap()
    AAA()
    t := &Test{}
    t.A = 888
    printIntln(t.A)
    testBasicGeneric()
    var a4 byte
    a4 = 1
    testInterface(&a4)
    printIntln(a4)
    a2 :=  &Test{
        A:100,
    }
    a2.add()
    printIntln(a2.A)
    testMath()
    test2.Dosth<int>(1)
    ttt := test2.testS{i:100}
    ttt.i = 996
    printIntln(ttt.i)
    f := struct{i int}{i:10}
    f.i = 11
    printIntln(f.i)
    a11 := generic.SG<test>{t:test{a:1}}
    printIntln(a11.t.a)
    a12 := generic.SG<int>{t:500}
    a11.GenericTPTest()
    testChain()
    indexer := test2.Arr<int>{}
    indexer[10]=100
    printIntln(indexer[10])
    fff := "aa"
    fff.PrintLn()
    fff = fff.Append("hello")
    fff.PrintLn()
    sub.print()
    v := 7%3
    printIntln(v)
    v = -1<<1
    printIntln(v)
    v = 3
    printIntln(v|4)
    bin := 0b010
    printIntln(bin)
    printIntln(g1.a)
    var fu func () int
    fu = testChain
    fu()
    return 0
}

var g1 = test{a:10}


func testChain() int {
    arr := Arr<int>{}
    printIntln(arr[0])
    a := 1
    printIntln(a.add().add())
    printIntln(a)
    printIntln(arr.Arrr().Arrr().arr[0])
    return 0
}
func testAllocWrap() int {
    a := &test{}
    a.a = 100
    b := &test1{}
    a.b=b
    a.b.a =1
    printIntln(a.b.a)
    return 0
}
type test struct{
    a int
    b *test1
}
type test1 struct{
    a int32
}
func testBasicGeneric() int {
    genericTest<int>(100)
    return 0
}
func AAA() void {
    printIntln(997)
    return
}

func genericTest<T>(v T) int {
    return 0
}



func testInterface(x any) int {
    var a any
    b := 1
    a = &b
    var c adder
    c = &b
    a = c
    printIntln(c.add())
    a.add()
    return 0
}
func add(this x any) int {
    return 0
}
func add(this a *int) int {
    return *a
}
type any interface {

}
type adder interface {
    add() int
}


func Add1(v **int) int {
    **v = **v + 1
    return 0
}

type Test struct {
    A int
    B Test1
}
type Test1 struct {
    A int
    B bool
}

package main

import (
    "github.com/Chronostasys/calc/runtime/generator"
    "github.com/Chronostasys/calc/runtime/coro"
    "github.com/Chronostasys/calc/runtime/coro/sync"
    "github.com/Chronostasys/calc/runtime/libuv"
    "github.com/Chronostasys/calc/runtime/strings"
    "github.com/Chronostasys/calc/runtime"
)

func getchar() byte

func time(t int) int

func GC_gcollect() void

func GC_dump() void

func coljob() coro.Task<int> async {
    for {
        await libuv.Delay(1000)
        GC_gcollect()
    }
    return 0
}

func makej() func () coro.Task<int> {
    curr := time(0)
    mu := sync.NewMutex()
    i := 0
    //a := GC_malloc(100)
    //runtime.regTrampFinalizer(a,nil)
    j := func () coro.Task<int> async {
        //a := runtime.heapalloc<[1048576]byte>()
        //runtime.regTrampFinalizer(a,nil)
        ////await libuv.Delay(1000)
        client := libuv.NewTCPClient()
        str := "120.79.152.10"
        re := await client.ConnectAsync(str,8000)
        if re!=0{
            s := "failed conn"
            s.PrintLn()
            mu.Lock()
            //ss := strings.NewStr(buf.Data,buf.Len)
            //ss.PrintLn()
            i = i + 1
            //printIntln(i)
            if i == 10000 {
                sec := time(0) - curr
                printIntln(sec)
            }
            mu.UnLock()
            await client.CloseAsync()
            return 0
        }
        payload := "GET /api/post/list?pageNo=1&size=1 HTTP/1.1\r\naccept: */*\r\nHost: 120.79.152.10:8000\r\n\r\n"
        re1 := await client.WriteBufAsync(payload)
        if re1!=0{
            s1 := "failed write"
            s1.PrintLn()
            await client.CloseAsync()
            mu.Lock()
            //ss := strings.NewStr(buf.Data,buf.Len)
            //ss.PrintLn()
            i = i + 1
            //printIntln(i)
            if i == 10000 {
                sec := time(0) - curr
                printIntln(sec)
            }
            mu.UnLock()
            return 0
        }
        buf := await client.ReadBufAsync(300)
        await client.CloseAsync()
        mu.Lock()
        //ss := strings.NewStr(buf.Data,buf.Len)
        //ss.PrintLn()
        i = i + 1
        //printIntln(i)
        if i % 1000==0 {
            sec := time(0) - curr
            printIntln(sec)
        }
        mu.UnLock()
        return 0
    }
    jj := func () coro.Task<int> async {
        ii := 0
        for  {
            await j()
            //re.StepNext()
            //Sleep(100)
            //printIntln(coro.sch.Len())
            //GC_gcollect()
            //ii = ii + 1
        }
        return 0
    }
    jjj := func () coro.Task<int> async {
        await jj()
        return 0
    }
    return jj
}

func main() void {
    mu := sync.NewMutex()
    curr := time(0)
    i := 0
    j := makej()
    printIntln(curr)
    f := func () coro.Task<int> async {
        i1 := 0
        for ;i1<100; {
            j()
            i1=i1+1
        }
        return 0
    }
    //coljob()
    f()
    getchar()
    return
}
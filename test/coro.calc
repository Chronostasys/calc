package main

import (
    "github.com/Chronostasys/calc/runtime/generator"
    "github.com/Chronostasys/calc/runtime/coro"
    "github.com/Chronostasys/calc/runtime/libuv"
)

func testCoroutine() void {
    libuv.StartUVLoop()
    coro.QueueTask(testCoroutineAsync())
    coro.QueueTask(coroutine2())
    coro.Exec()
    for i :=0; i<50 ; i = i + 1 {
        coro.QueueTask(testCoroutineAsync())
        coro.QueueTask(coroutine2())
    }
    Sleep(3000)
    return
}

func testCoroutineAsync() generator.Generator<int> async {
    s := "async func main queued"
    s.PrintLn()
    s = "async func main call async func 1"
    s.PrintLn()
    re := await coroutine1()
    s = "async func 1 return in async func main:"
    s.PrintLn()
    printIntln(re)

    return 1
}

func coroutine1() generator.Generator<int> async {
    t := libuv.NewTimer()
    re := await t.Delay(1000)
    return 8989
}

func coroutine2() generator.Generator<int> async {
    s := "async func 2 queued"
    s.PrintLn()
    s = "async func 2 call async func 1"
    s.PrintLn()
    re := await coroutine1()
    s = "async func 1 return in async func 2:"
    s.PrintLn()
    printIntln(re)
    
    return 2
}

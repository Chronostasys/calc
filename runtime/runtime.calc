package runtime

func heapalloc<T>() *T {
    size := sizeof<T>()
    //if size<=64&&size>48 {
    //    printnameof<T>()
    //    printIntln(size)
    //}
    //b := false
    //if size==64 {
    //    //b = true
    //    //iii = iii + 1
    //    //printIntln(iii)
    //    printnameof<T>()
    //    //size = size+6400
    //}
    bs := GC_malloc(size)
    //if b {
    //    regTrampFinalizer(bs,nil)
    //}
    //bs = memset(bs,0,size)
    return unsafecast<*byte,*T>(bs)
}
func heapmalloc<T>() *T {
    size := sizeof<T>()
    bs := GC_malloc_uncollectable(size)
    //GC_add_roots(bs,inttoptr<*byte>(ptrtoint<*byte>(bs)+size))
    //bs = memset(bs,0,size)
    return unsafecast<*byte,*T>(bs)
}

func GC_reachable_here(ptr *byte) void

func GC_set_pages_executable(i int32) void

func GC_base(ptr *byte) *byte

func GC_free(o *byte) void

func GC_register_finalizer_unreachable(o *byte, f GC_Finalizer, cd *byte, of GC_Finalizer, ocd **byte) void


func GC_set_java_finalization(i int32) void

var iii = 0


type GC_Finalizer func (o *byte, cd *byte) void

func GC_malloc_uncollectable(n int) *byte

func GC_debug_malloc(n int) *byte

func GC_init() void


func GC_remove_roots(start *byte, end *byte) void
func GC_add_roots(start *byte, end *byte) void




func zero_mem<T>(t *T) void {
    size := sizeof<T>()
    bs := unsafecast<*T,*byte>(t)
    seted := memset(bs,0,size)
    return
}

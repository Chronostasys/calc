package runtime

func heapalloc<T>() *T {
    size := sizeof<T>()
    bs := GC_malloc(size)
    seted := memset(bs,0,size)
    return unsafecast<*byte,*T>(seted)
}

func GC_remove_roots(start *byte, end *byte) void
func GC_add_roots(start *byte, end *byte) void

func heapallocTrampoline<T>() *T {
    size := sizeof<T>()
    bs := malloc(size)
    seted := memset(bs,0,size)
    end := ptrtoint<*byte>(bs) + size
    endptr := inttoptr<*byte>(end)
    GC_add_roots(bs,endptr)
    return unsafecast<*byte,*T>(seted)
}



func zero_mem<T>(t *T) void {
    size := sizeof<T>()
    bs := unsafecast<*T,*byte>(t)
    seted := memset(bs,0,size)
    return
}

package coro

import (
    "github.com/Chronostasys/calc/runtime/generator"
    "github.com/Chronostasys/calc/runtime/coro/sm"
    "github.com/Chronostasys/calc/runtime/coro/sync"
)

type AsyncGen<T> struct {
    nextTask int
    lock *sync.Mutex
    done bool
    f func() T
    re T
    reFromFunc bool
}

func SetJob<T>(this ag *AsyncGen<T>,f func() T) void {
    ag.f = f
    return 
}

func NewAsyncGen<T>() *AsyncGen<T> {
    return &AsyncGen<T>{
        lock: sync.NewMutex(),
    }
}

func StepNext<T>(this ag *AsyncGen<T>) bool {
    reee := ag.f()
    if ag.reFromFunc {
        ag.re = reee
    }
    return false
}
func GetResult<T>(this ag *AsyncGen<T>) T {
    return ag.re
}
func GetMutex<T>(this ag *AsyncGen<T>) *sync.Mutex {
    return ag.lock
}
func SetResult<T>(this ag *AsyncGen<T>, t T) void {
    ag.re = t
    return
}

func GetContinuous<T>(this ag *AsyncGen<T>) *sm.StateMachine {
    ptr := inttoptr<*sm.StateMachine>(ag.nextTask)
    return ptr
}

func IsDone<T>(this ag *AsyncGen<T>) bool {
    return ag.done
}
func SetDone<T>(this ag *AsyncGen<T>) void {
    ag.done = true
    return
}

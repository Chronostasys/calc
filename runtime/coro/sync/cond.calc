package sync

func pthread_cond_wait(cond *byte, mutex *byte) int32

func pthread_cond_signal(cond *byte) int32

func pthread_cond_init(cond *byte, attr *byte) int32

type Cond struct {
    con *byte
}
func new_pthread_cond_t() *byte

func NewCond() *Cond {
    con := new_pthread_cond_t()
    re := pthread_cond_init(con,nil)
    if re != 0 {
        s := "init cond failed"
        s.PrintLn()
    }
    return &Cond{
        con: con,
    }
}

// A Cond will release the mutex before it sleep, 
// then aquire it just after it is awaked
func Wait(this cond *Cond, mu *Mutex) void {
    re := pthread_cond_wait(cond.con, mu.mu)
    if re !=0 {
        s := "cond wait failed"
        s.PrintLn()
        printIntln(re)
    }
    return
}

func Signal(this cond *Cond) void {
    re := pthread_cond_signal(cond.con)
    if re !=0 {
        s := "cond sig failed"
        s.PrintLn()
        printIntln(re)
    }
    return
}


package sync

func pthread_mutex_lock(l *byte) int32
func pthread_mutex_unlock(l *byte) int32
func pthread_mutex_init(l *byte, attr *int32) int32

func new_pthread_mutex_t() *byte

type Mutex struct {
    mu *byte
}

type Locker interface {
    Lock() void
    UnLock() void
}

func NewMutex() *Mutex {
    i := new_pthread_mutex_t()
    mu := &Mutex{
        mu: i,
    }
    re := pthread_mutex_init(mu.mu, nil)
    if re !=0 {
        s := "mutex init failed"
        s.PrintLn()
    }
    return mu
}

func Lock(this m *Mutex) void {
    re := pthread_mutex_lock(m.mu)
    if re !=0 {
        s := "mutex lock failed"
        s.PrintLn()
        printIntln(re)
    }
    return
}

func UnLock(this m *Mutex) void {
    re :=  pthread_mutex_unlock(m.mu)
    if re !=0 {
        s := "mutex unlock failed"
        s.PrintLn()
        printIntln(re)
    }
    return
}


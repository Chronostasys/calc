package sync

func pthread_mutex_lock(l *int) int32
func pthread_mutex_unlock(l *int) int32
func pthread_mutex_init(l *int, attr *int32) int32

type Mutex struct {
    mu *int
}

type Locker interface {
    Lock() void
    UnLock() void
}

func NewMutex() *Mutex {
    i := 0
    mu := &Mutex{
        mu: &i,
    }
    re := pthread_mutex_init(mu.mu, nil)
    if re !=0 {
        s := "mutex init failed"
        s.PrintLn()
    }
    return mu
}

func Lock(this m *Mutex) void {
    re := pthread_mutex_lock(m.mu)
    if re !=0 {
        s := "mutex unlock failed"
        s.PrintLn()
        printIntln(re)
    }
    return
}

func UnLock(this m *Mutex) void {
    re :=  pthread_mutex_unlock(m.mu)
    if re !=0 {
        s := "mutex unlock failed"
        s.PrintLn()
        printIntln(re)
    }
    return
}


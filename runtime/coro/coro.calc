package coro

import (
    "github.com/Chronostasys/calc/runtime/linkedlist"
)

var sch = NewScheduler()

type StateMachine interface {
    StepNext() bool
}

type defaultScheduler struct {
    tasks *linkedlist.List<StateMachine>
}

type Scheduler interface {
    QueueTask(s StateMachine) void
    Exec() void
    Len() int
}


func NewScheduler() Scheduler {
    return &defaultScheduler{
        tasks: linkedlist.New<StateMachine>(),
    }
}

func QueueTask(this s *defaultScheduler, st StateMachine) void {
    s.tasks.Push(st)
    return
}

func QueueTaskIfPossible(st *StateMachine) void {
    if st == nil {
        return
    }
    sch.QueueTask(*st)
    return
}

func QueueTask(st StateMachine) void {
    sch.QueueTask(st)
    return
}
func Exec() void {
    sch.Exec()
    return
}


func Exec(this s *defaultScheduler) void {
    for ;s.tasks.Len()>0; {
        t := s.tasks.Shift()
        for ;t.StepNext(); {
        }
    }
    return
}

func Len(this s *defaultScheduler) int {
    return s.tasks.Len()
}



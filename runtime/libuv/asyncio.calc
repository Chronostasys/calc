package libuv

import (
    "github.com/Chronostasys/calc/runtime/generator"
    "github.com/Chronostasys/calc/runtime/coro/sm"
    "github.com/Chronostasys/calc/runtime/coro"
    "github.com/Chronostasys/calc/runtime/coro/sync"
)

type AsyncGen struct {
    nextTask int
    lock *sync.Mutex
    done bool
    f func() void
}

func NewAsyncGen(f func() void) *AsyncGen {
    return &AsyncGen{
        lock: sync.NewMutex(),
        f: f,
    }
}

func StepNext(this ag *AsyncGen) bool {
    ag.f()
    return false
}
func GetResult(this ag *AsyncGen) int {
    return 0
}
func GetMutex(this ag *AsyncGen) *sync.Mutex {
    return ag.lock
}

func GetContinuous(this ag *AsyncGen) *sm.StateMachine {
    return inttoptr<*sm.StateMachine>(ag.nextTask)
}

func IsDone(this ag *AsyncGen) bool {
    return ag.done
}
func SetDone(this ag *AsyncGen) void {
    ag.f = nil
    ag.lock = nil
    ag.done = true
    return
}
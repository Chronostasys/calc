package libuv

import (
    "github.com/Chronostasys/calc/runtime/coro"
    "github.com/Chronostasys/calc/runtime"
)

type ConnCB func (conn UVConn, status int32) void

func uv_tcp_connect(conn UVConn, sock UVTcp, addr Addr, cb ConnCB) int32


type TCPClient struct {
    tcp UVTcp
    conn UVConn// 不会被自动回收，加个引用以后free它
}

func NewTCPClient() *TCPClient {
    tcp := new_tcp()
    //runtime.regTrampFinalizer(tcp,nil)

    return &TCPClient{
        tcp: tcp,
    }
}

func ConnectAsync(this client *TCPClient, host string, port int32) coro.Task<int32> {
    ag := coro.NewAsyncGen<int32>()
    ag.SetJob<int32>(func () int32 {
        ff := func () void {
            re := uv_tcp_init(uv_default_loop(), client.tcp)
            if re !=0 {
                s := "init tcp failed"
                s.PrintLn()
                printIntln(re)
            }
            addr := new_addr()
            re = uv_ip4_addr(host.Byte(),port,addr)
            if re != 0 {
                s := "init addr failed"
                s.PrintLn()
                printIntln(re)
            }
            conn := new_conn()
            client.conn = conn
            re = uv_tcp_connect(conn,client.tcp,addr, func (conn1 UVConn, status int32) void {
                ag.SetResult(status)
                coro.TryQueueContinuous(ag)
                return
            })
            if re != 0 {
                s := "start conn failed"
                s.PrintLn()
                printIntln(re)
            }
            return
        }
        QueueEvJob(ff)
        return 0
    })
    coro.QueueTask(ag)
    return ag
}
func WriteBufAsync(this client *TCPClient, str string) coro.Task<int> {
    return client.tcp.WriteBufAsync(str)
}

func ReadBufAsync(this client *TCPClient,len int) coro.Task<*Buf> {
    return client.tcp.ReadBufAsync(len)
}

func CloseAsync(this client *TCPClient) coro.Task<int> {
    // 手动free conn
    runtime.GC_free(client.conn)
    return client.tcp.CloseAsync()
}


package libuv

import (
    "github.com/Chronostasys/calc/runtime/generator"
    "github.com/Chronostasys/calc/runtime/coro/sm"
    "github.com/Chronostasys/calc/runtime/coro"
    "github.com/Chronostasys/calc/runtime"
    "github.com/Chronostasys/calc/runtime/coro/sync"
)

type UVTcp *byte


func new_tcp() UVTcp

type Addr *byte

func new_addr() Addr

func uv_ip4_addr(ip *byte, port int32, addr Addr) int32

type ConnCB func (server UVTcp, status int32) void

func uv_tcp_bind(handle UVTcp, addr Addr, flags int32) int32

func get_tcp_data(t UVTcp) *Buffer

func set_tcp_data(t UVTcp, buf *Buffer) void

type WriteCB func (server UVWrite, status int32) void

func uv_write(req UVWrite, handle UVStream, bufs *UVBuf, nbufs int, cb WriteCB) int32

func new_write() UVWrite

func uv_buf_init(buf *byte, len int) UVBuf

type UVWrite *byte

func TCPListen(ip string, port int32, cb ConnCB) void {
    ff := func () void {
        tcp := new_tcp()
        uv_tcp_init(uv_default_loop(), tcp)
        addr := new_addr()
        re := uv_ip4_addr(ip.Byte(),port,addr)
        if re != 0 {
            s := "addr failed"
            s.PrintLn()
        }
        uv_tcp_bind(tcp,addr,0)
        realcb := func (server UVTcp, status int32) void {
            client := new_tcp()
            uv_tcp_init(uv_default_loop(),client)
            uv_accept(server, client)
            cb(client,status)
            return
        }
        re := uv_listen(tcp,128,realcb)
        if re != 0 {
            s := "listen failed"
            s.PrintLn()
        }
        return
    }
    QueueEvJob(ff)
    return
}

func tcpAllocCB(handle UVHandle, suggested_size int, buf *UVBuf) void {
    buf.Len = suggested_size
    data := get_tcp_data(handle)
    buf.Data = data.PreWrite(suggested_size)
    return
}


func WriteBufAsync(this server UVTcp, str string) coro.Task<int> {
    ag := coro.NewAsyncGen<int>()
    ag.SetJob<int>(func () int {
        ff := func () void {
            wt := new_write()
            buf := &UVBuf{
                Data: str.Byte(),
                Len: str.Len(),
            }
            uv_write(wt,server,buf,1,func (server UVWrite, status int32) void{
                ag.SetResult(status)
                coro.TryQueueContinuous(ag)
                return
            })
            return
        }
        QueueEvJob(ff)
        return 0
    })
    coro.QueueTask(ag)
    return ag

}

func ReadBufAsync(this server UVTcp,len int) coro.Task<*UVBuf> {
    ag := coro.NewAsyncGen<*UVBuf>()
    ag.SetJob<*UVBuf>(func () *UVBuf {
        ff := func () void {
            data := get_tcp_data(server)
            if data!=nil{
                if data.len>=len {
                    data.len = data.len-len
                    data.max = data.max-len
                    newbuf := &UVBuf{
                        Data:data.buf,
                        Len:len,
                    }
                    data.buf = inttoptr<*byte>(ptrtoint<*byte>(data.buf)+len)
                    ag.SetResult(newbuf)
                    coro.TryQueueContinuous(ag)
                    return
                }
                data.task = ag
                data.explen = len
                return
            }
            set_tcp_data(server,&Buffer{task:ag,explen:len})
            uv_read_start(server,tcpAllocCB,func (client UVStream, nread int, buf *UVBuf) void{
                //if nread<0 {
                //    printIntln(nread)
                //    uv_close(client,nil)
                //}
                //uv_close(server,nil)
                data := get_tcp_data(client)
                
                data.len = data.len+nread
                ag1 := data.task
                if ag1!=nil&&data.len>=data.explen {
                    newbuf := &UVBuf{
                        Data:data.buf,
                        Len:data.explen,
                    }
                    ag1.SetResult(newbuf)
                    coro.TryQueueContinuous(ag1)
                    data.buf = inttoptr<*byte>(ptrtoint<*byte>(data.buf)+data.explen)
                    data.len = data.len-data.explen
                    data.max = data.max-data.explen
                    data.task = nil
                }
                return
            })
            return
        }
        QueueEvJob(ff)
        return nil
    })
    coro.QueueTask(ag)
    return ag
}


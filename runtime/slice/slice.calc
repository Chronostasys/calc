package slice

type Slice<T> struct {
    thead *T
    len int32
    cap int32
}

func NewSlice<T>() *Slice<T> {
    return &Slice<T>{}
}

func IndexOp<T>(this arr *Slice<T>, index int32) T {
    g := _gep<*T>(arr.thead, index)
    return *g
}
func IndexSetOp<T>(this arr *Slice<T>, index int32, i T) void {
    g := _gep<*T>(arr.thead, index)
    *g = i
    return
}

func Push<T>(this arr *Slice<T>, t T) void {
    if arr.cap>arr.len {
        g := _gep<*T>(arr.thead, arr.len)
        *g = t
        arr.len = arr.len+1
    }else {
        if arr.cap == 0 {
            arr.cap = 2
        }
        size := sizeof<T>()
        mem := GC_malloc(size*2*arr.cap)
        head := arr.thead
        arr.thead =  unsafecast<*byte,*T>(mem)
        if head!=nil {
            memcpy(mem,unsafecast<*T,*byte>(head),size*arr.len)
        }
        arr.cap = 2*arr.cap
        arr.Push<T>(t)
    }
    return
}

func Append<T>(this arr *Slice<T>, arr2 *Slice<T>) *Slice<T> {
    newarr := NewSlice<T>()
    if arr.len+arr2.len == 0 {
        return newarr
    }
    size := sizeof<T>()
    mem := GC_malloc(size*(arr.len+arr2.len))
    newarr.thead =  unsafecast<*byte,*T>(mem)
    if arr.thead!=nil {
        memcpy(mem,unsafecast<*T,*byte>(arr.thead),size*arr.len)
        mem = unsafecast<*T,*byte>(_gep<*T>(newarr.thead,arr.len))
    }
    if arr2.thead!=nil {
        memcpy(mem,unsafecast<*T,*byte>(arr2.thead),size*arr2.len)
    }
    newarr.cap = arr.len+arr2.len
    newarr.len = newarr.cap
    return newarr
}

func Len<T>(this arr *Slice<T>) int32 {
    return arr.len
}


